<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Maze Generator</title>
    <link href="https://fonts.googleapis.com/css?family=Inter:400,600,700&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="/style.css" rel="stylesheet">
</head>
<body>
    <nav class="navbar navbar-expand-lg maze-toolbar shadow-sm">
        <div class="container-fluid">
            <a class="navbar-brand d-flex align-items-center gap-2" href="#" style="color:var(--ftb-green);font-weight:700;font-size:1.5rem;">
                <i class="bi bi-cpu"></i> MazeRunner
            </a>
            <div class="d-flex flex-row gap-3 align-items-center ms-auto">
                <form id="maze-form" class="d-flex flex-row gap-2 align-items-center mb-0" autocomplete="off">
                    <label for="algorithm" class="form-label mb-0 me-1" data-bs-toggle="tooltip" data-bs-placement="bottom" title="Choose the algorithm to generate the maze.">Generate:</label>
                    <select class="form-select form-select-sm" id="algorithm" name="algorithm" style="width:auto;min-width:140px;" data-bs-toggle="tooltip" data-bs-placement="bottom" title="Maze generation algorithm">
                        <option value="dfs">Depth-First Search</option>
                        <option value="prim">Prim's Algorithm</option>
                        <option value="kruskal">Kruskal's Algorithm</option>
                    </select>
                    <input type="number" class="form-control form-control-sm" id="size" name="size" value="20" min="5" max="200" placeholder="Size" style="width:80px;" data-bs-toggle="tooltip" data-bs-placement="bottom" title="Maze size (number of cells per side)">
                    <input type="number" class="form-control form-control-sm" id="speed" name="speed" value="1" min="0" max="1000" placeholder="Gen ms" style="width:90px;" data-bs-toggle="tooltip" data-bs-placement="bottom" title="Generation speed in milliseconds per step (0 = instant)">
                </form>
                <form id="solve-form" class="d-flex flex-row gap-2 align-items-center mb-0" autocomplete="off">
                    <label for="solve-algorithm" class="form-label mb-0 me-1" data-bs-toggle="tooltip" data-bs-placement="bottom" title="Choose the algorithm to solve the maze.">Solve:</label>
                    <select class="form-select form-select-sm" id="solve-algorithm" name="solve-algorithm" style="width:auto;min-width:140px;" data-bs-toggle="tooltip" data-bs-placement="bottom" title="Maze solving algorithm">
                        <option value="dfs">Depth-First Search</option>
                        <option value="bfs">Breadth-First Search</option>
                        <option value="astar">A* Search</option>
                    </select>
                    <input type="number" class="form-control form-control-sm" id="solve-speed" name="solve-speed" value="1" min="0" max="1000" placeholder="Solve ms" style="width:90px;" data-bs-toggle="tooltip" data-bs-placement="bottom" title="Solving speed in milliseconds per step (0 = instant)">
                </form>
            </div>
        </div>
    </nav>
    <div class="container mt-5 shadow-lg">
        <div class="text-center mt-4">
            <div id="maze-placeholder" style="display:flex;align-items:center;justify-content:center;height:500px;width:500px;margin:auto;background:rgba(0,0,0,0.5);border:2.5px solid var(--ftb-blue);border-radius:18px;position:relative;">
                <span style="color:var(--ftb-gray);font-size:2rem;opacity:0.85;letter-spacing:0.04em;">Welcome</span>
            </div>
            <canvas id="maze-canvas" width="500" height="500" tabindex="0" aria-label="Maze Canvas" style="display:none;"></canvas>
        </div>
    </div>
    <footer class="maze-footer-bar d-flex justify-content-center align-items-center gap-2 flex-wrap">
        <button id="generate-button" class="btn btn-primary shadow" aria-label="Generate Maze"><i class="bi bi-play"></i> Generate</button>
        <button id="solve-button" class="btn btn-success shadow" style="display: none;" aria-label="Solve Maze"><i class="bi bi-lightning"></i> Solve</button>
        <button id="stop-button" class="btn btn-danger shadow" style="display: none;" aria-label="Stop Animation"><i class="bi bi-stop"></i> Stop</button>
        <button id="toggle-grid-button" class="btn btn-secondary shadow" aria-label="Toggle Grid"><i class="bi bi-grid"></i> Show Grid</button>
        <button id="view-3d-button" class="btn btn-secondary shadow" style="display: none;" aria-label="View in 3D"><i class="bi bi-cube"></i> 3D View</button>
    </footer>
    <div id="maze3d-modal" style="display:none; position:fixed; top:0; left:0; width:100vw; height:100vh; background:rgba(20,20,30,0.98); z-index:9999; align-items:center; justify-content:center;">
        <button id="close-3d-btn" style="position:absolute;top:20px;right:30px;z-index:10000;font-size:2rem;background:#222;color:#fff;border:none;border-radius:8px;padding:0 16px;cursor:pointer;" aria-label="Close 3D View">&times;</button>
        <div id="maze-3d-container" style="width: 90vw; height: 90vh; margin:auto;"></div>
    </div>
    <div id="toast" role="status" aria-live="polite"></div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.155.0/build/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.js"></script>
    <script src="/maze3d.js"></script>
    <script>
        let animationTimeouts = [];
        let generatedMaze = null;
        let startPoint = null;
        let endPoint = null;
        let showGrid = false;

        document.getElementById('generate-button').addEventListener('click', async (event) => {
            event.preventDefault();

            const algorithm = document.getElementById('algorithm').value;
            const size = document.getElementById('size').value;
            const speed = document.getElementById('speed').value;

            // Always clear the canvas before generating a new maze
            const canvas = document.getElementById('maze-canvas');
            const ctx = canvas.getContext('2d');
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // Reset grid toggle state and button
            showGrid = false;
            const gridBtn = document.getElementById('toggle-grid-button');
            if (gridBtn) gridBtn.textContent = 'Show Grid';

            // Clear any previous animations
            stopAnimation();

            // Hide placeholder, show canvas
            document.getElementById('maze-placeholder').style.display = 'none';
            canvas.style.display = 'block';

            try {
                const response = await fetch('/generate-maze', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ algorithm, size })
                });

                if (!response.ok) {
                    throw new Error('Failed to generate maze');
                }

                const data = await response.json();
                const { maze, steps, start, end } = data;

                // Store the generated maze, start, and end points
                generatedMaze = maze;
                startPoint = start;
                endPoint = end;

                animateMaze(maze, steps, size, speed, start, end);

                // Show the solve button after generation
                document.getElementById('solve-button').style.display = 'block';
                // Show the 3D button after generation
                document.getElementById('view-3d-button').style.display = 'block';
            } catch (error) {
                alert(error.message);
            }
        });

        document.getElementById('stop-button').addEventListener('click', stopAnimation);

        document.getElementById('solve-button').addEventListener('click', async () => {
            if (!generatedMaze || !startPoint || !endPoint) {
                alert('Maze not generated yet!');
                return;
            }

            // Redraw the maze to clear any previous solution before solving again
            redrawMazeWithGrid();

            const solveAlgorithm = document.getElementById('solve-algorithm').value;
            const solveSpeed = document.getElementById('solve-speed').value;

            try {
                const response = await fetch('/solve-maze', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ maze: generatedMaze, start: startPoint, end: endPoint, algorithm: solveAlgorithm })
                });

                if (!response.ok) {
                    throw new Error('Failed to solve maze');
                }

                const data = await response.json();
                const { solutionSteps, optimalPath } = data;
                animateSolution(solutionSteps, solveSpeed);
            } catch (error) {
                alert(error.message);
            }
        });

        document.getElementById('view-3d-button').addEventListener('click', () => {
            if (!generatedMaze) {
                alert('Maze not generated yet!');
                return;
            }
            // Show modal overlay and render 3D maze
            const modal = document.getElementById('maze3d-modal');
            modal.style.display = 'flex';
            document.body.style.overflow = 'hidden';
            renderMaze3D(generatedMaze, startPoint, endPoint);
        });
        document.getElementById('close-3d-btn').addEventListener('click', close3DModal);
        document.addEventListener('keydown', function(e) {
            if (document.getElementById('maze3d-modal').style.display === 'flex' && e.key === 'Escape') {
                close3DModal();
            }
        });
        function close3DModal() {
            const modal = document.getElementById('maze3d-modal');
            modal.style.display = 'none';
            document.body.style.overflow = '';
            // Clean up 3D renderer and listeners
            if (window.disposeMaze3D) window.disposeMaze3D();
            document.getElementById('maze-3d-container').innerHTML = '';
        }

        document.getElementById('toggle-grid-button').addEventListener('click', function() {
            showGrid = !showGrid;
            this.textContent = showGrid ? 'Hide Grid' : 'Show Grid';
            redrawMazeWithGrid();
        });

        function redrawMazeWithGrid() {
            if (!generatedMaze) return;
            // Redraw the maze and grid
            const canvas = document.getElementById('maze-canvas');
            const ctx = canvas.getContext('2d');
            const size = generatedMaze.length;
            const cellSize = Math.floor(Math.min(canvas.width / size, canvas.height / size));
            const offsetX = Math.floor((canvas.width - cellSize * size) / 2);
            const offsetY = Math.floor((canvas.height - cellSize * size) / 2);
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.fillStyle = 'black';
            ctx.fillRect(offsetX, offsetY, cellSize * size, cellSize * size);
            ctx.fillStyle = 'white';
            for (let x = 0; x < size; x++) {
                for (let y = 0; y < size; y++) {
                    if (generatedMaze[x][y] === 0) {
                        ctx.fillRect(offsetX + y * cellSize, offsetY + x * cellSize, cellSize, cellSize);
                    }
                }
            }
            ctx.fillStyle = 'green';
            ctx.fillRect(offsetX + startPoint[1] * cellSize, offsetY + startPoint[0] * cellSize, cellSize, cellSize);
            ctx.fillStyle = 'red';
            ctx.fillRect(offsetX + endPoint[1] * cellSize, offsetY + endPoint[0] * cellSize, cellSize, cellSize);
            if (showGrid) {
                drawGridOverlay(size, cellSize, offsetX, offsetY);
            }
        }

        function drawGridOverlay(size, cellSize, offsetX, offsetY) {
            const canvas = document.getElementById('maze-canvas');
            const ctx = canvas.getContext('2d');
            ctx.save();
            ctx.strokeStyle = '#d3d3d3';
            ctx.lineWidth = 1;
            for (let i = 0; i <= size; i++) {
                // Vertical lines
                ctx.beginPath();
                ctx.moveTo(offsetX + i * cellSize, offsetY);
                ctx.lineTo(offsetX + i * cellSize, offsetY + size * cellSize);
                ctx.stroke();
                // Horizontal lines
                ctx.beginPath();
                ctx.moveTo(offsetX, offsetY + i * cellSize);
                ctx.lineTo(offsetX + size * cellSize, offsetY + i * cellSize);
                ctx.stroke();
            }
            ctx.restore();
        }

        function animateMaze(maze, steps, size, speed, start, end) {
            const canvas = document.getElementById('maze-canvas');
            const ctx = canvas.getContext('2d');
            // Use Math.floor for cellSize, but ensure the maze fills the canvas exactly
            const cellSize = Math.floor(Math.min(canvas.width / size, canvas.height / size));
            // Adjust offsets so the maze is always flush to the left/top
            const offsetX = Math.floor((canvas.width - cellSize * size) / 2);
            const offsetY = Math.floor((canvas.height - cellSize * size) / 2);

            // Clear the canvas
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            // Fill only the maze area with black background
            ctx.fillStyle = 'black';
            ctx.fillRect(offsetX, offsetY, cellSize * size, cellSize * size);

            // Animate the maze generation
            ctx.fillStyle = 'white';
            steps.forEach(([x, y], index) => {
                if (speed === '0') {
                    ctx.fillRect(offsetX + y * cellSize, offsetY + x * cellSize, cellSize, cellSize);
                } else {
                    const timeout = setTimeout(() => {
                        ctx.fillRect(offsetX + y * cellSize, offsetY + x * cellSize, cellSize, cellSize);
                        if (index === steps.length - 1) {
                            ctx.fillStyle = 'green';
                            ctx.fillRect(offsetX + start[1] * cellSize, offsetY + start[0] * cellSize, cellSize, cellSize);
                            ctx.fillStyle = 'red';
                            ctx.fillRect(offsetX + end[1] * cellSize, offsetY + end[0] * cellSize, cellSize, cellSize);
                            document.getElementById('stop-button').style.display = 'none';
                        }
                    }, index * speed);
                    animationTimeouts.push(timeout);
                }
            });
            // Draw start and end points immediately for instant mode
            if (speed === '0') {
                ctx.fillStyle = 'green';
                ctx.fillRect(offsetX + start[1] * cellSize, offsetY + start[0] * cellSize, cellSize, cellSize);
                ctx.fillStyle = 'red';
                ctx.fillRect(offsetX + end[1] * cellSize, offsetY + end[0] * cellSize, cellSize, cellSize);
                document.getElementById('stop-button').style.display = 'none';
            }
            // After animation, if grid is enabled, draw it
            if (showGrid) {
                drawGridOverlay(size, cellSize, offsetX, offsetY);
            }
        }

        function animateSolution(solutionSteps, solveSpeed) {
            const canvas = document.getElementById('maze-canvas');
            const ctx = canvas.getContext('2d');
            const size = generatedMaze[0].length;
            const cellSize = Math.floor(Math.min(canvas.width / size, canvas.height / size));
            const offsetX = Math.floor((canvas.width - cellSize * size) / 2);
            const offsetY = Math.floor((canvas.height - cellSize * size) / 2);

            ctx.fillStyle = 'blue';
            solutionSteps.forEach(([x, y], index) => {
                setTimeout(() => {
                    ctx.fillRect(offsetX + y * cellSize, offsetY + x * cellSize, cellSize, cellSize);
                    // After drawing the blue cell, redraw start and end so they are always visible
                    ctx.fillStyle = 'green';
                    ctx.fillRect(offsetX + startPoint[1] * cellSize, offsetY + startPoint[0] * cellSize, cellSize, cellSize);
                    ctx.fillStyle = 'red';
                    ctx.fillRect(offsetX + endPoint[1] * cellSize, offsetY + endPoint[0] * cellSize, cellSize, cellSize);
                    ctx.fillStyle = 'blue'; // Reset for next step
                }, index * solveSpeed);
            });

            // After all blue steps, animate the optimal path in yellow from end to start
            setTimeout(() => {
                const optimalPath = extractOptimalPath(solutionSteps, startPoint, endPoint);
                // Animate from end to start
                for (let i = optimalPath.length - 1; i >= 0; i--) {
                    setTimeout(() => {
                        const [x, y] = optimalPath[i];
                        ctx.fillStyle = 'yellow';
                        ctx.fillRect(offsetX + y * cellSize, offsetY + x * cellSize, cellSize, cellSize);
                        // Redraw start and end on top
                        ctx.fillStyle = 'green';
                        ctx.fillRect(offsetX + startPoint[1] * cellSize, offsetY + startPoint[0] * cellSize, cellSize, cellSize);
                        ctx.fillStyle = 'red';
                        ctx.fillRect(offsetX + endPoint[1] * cellSize, offsetY + endPoint[0] * cellSize, cellSize, cellSize);
                    }, (optimalPath.length - 1 - i) * solveSpeed);
                }
            }, solutionSteps.length * solveSpeed + 50);
        }

        // Helper to extract optimal path from solution steps
        function extractOptimalPath(solutionSteps, start, end) {
            // Use BFS to reconstruct the shortest path from start to end
            const parentMap = new Map();
            const visited = new Set();
            const queue = [start];
            visited.add(`${start[0]},${start[1]}`);
            for (let i = 1; i < solutionSteps.length; i++) {
                const [x, y] = solutionSteps[i];
                visited.add(`${x},${y}`);
            }
            const directions = [
                [0, -1], [0, 1], [-1, 0], [1, 0]
            ];
            let found = false;
            while (queue.length > 0 && !found) {
                const [cx, cy] = queue.shift();
                for (const [dx, dy] of directions) {
                    const nx = cx + dx;
                    const ny = cy + dy;
                    const key = `${nx},${ny}`;
                    if (visited.has(key) && !parentMap.has(key)) {
                        parentMap.set(key, [cx, cy]);
                        queue.push([nx, ny]);
                        if (nx === end[0] && ny === end[1]) {
                            found = true;
                            break;
                        }
                    }
                }
            }
            // Backtrack from end to start
            let current = end;
            const path = [];
            while (current) {
                path.push(current);
                if (current[0] === start[0] && current[1] === start[1]) break;
                current = parentMap.get(`${current[0]},${current[1]}`);
                if (!current) break;
            }
            return path.reverse();
        }

        function stopAnimation() {
            // Clear all timeouts
            animationTimeouts.forEach(timeout => clearTimeout(timeout));
            animationTimeouts = [];

            // Instantly draw the rest of the maze
            if (generatedMaze) {
                const canvas = document.getElementById('maze-canvas');
                const ctx = canvas.getContext('2d');
                const size = generatedMaze.length;
                const cellSize = Math.floor(Math.min(canvas.width / size, canvas.height / size));
                const offsetX = Math.floor((canvas.width - cellSize * size) / 2);
                const offsetY = Math.floor((canvas.height - cellSize * size) / 2);
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                ctx.fillStyle = 'black';
                ctx.fillRect(offsetX, offsetY, cellSize * size, cellSize * size);
                ctx.fillStyle = 'white';
                for (let x = 0; x < size; x++) {
                    for (let y = 0; y < size; y++) {
                        if (generatedMaze[x][y] === 0) {
                            ctx.fillRect(offsetX + y * cellSize, offsetY + x * cellSize, cellSize, cellSize);
                        }
                    }
                }
                ctx.fillStyle = 'green';
                ctx.fillRect(offsetX + startPoint[1] * cellSize, offsetY + startPoint[0] * cellSize, cellSize, cellSize);
                ctx.fillStyle = 'red';
                ctx.fillRect(offsetX + endPoint[1] * cellSize, offsetY + endPoint[0] * cellSize, cellSize, cellSize);

                // Hide placeholder, show canvas
                document.getElementById('maze-placeholder').style.display = 'none';
                canvas.style.display = 'block';
            }
            // After drawing, if grid is enabled, draw it
            if (showGrid) {
                drawGridOverlay(size, cellSize, offsetX, offsetY);
            }
            document.getElementById('stop-button').style.display = 'none';
        }

        // Enable Bootstrap tooltips for all elements with data-bs-toggle="tooltip"
        document.addEventListener('DOMContentLoaded', function () {
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.forEach(function (tooltipTriggerEl) {
                new bootstrap.Tooltip(tooltipTriggerEl);
            });
        });
    </script>
</body>
</html>
