<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Maze Generator</title>
    <link href="https://fonts.googleapis.com/css?family=Inter:400,600,700&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="/style.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5 shadow-lg">
        <div class="row g-4">
            <div class="col-md-6">
                <h2><i class="bi bi-grid-3x3-gap"></i> Maze Generation</h2>
                <form id="maze-form">
                    <div class="mb-3">
                        <label for="algorithm" class="form-label">Select Generation Algorithm</label>
                        <select class="form-select" id="algorithm" name="algorithm">
                            <option value="dfs">Depth-First Search</option>
                            <option value="prim">Prim's Algorithm</option>
                            <option value="kruskal">Kruskal's Algorithm</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="size" class="form-label">Maze Size</label>
                        <input type="number" class="form-control" id="size" name="size" value="20" placeholder="Enter maze size (e.g., 20)">
                    </div>
                    <div class="mb-3">
                        <label for="speed" class="form-label">Generation Speed (ms per step)</label>
                        <input type="number" class="form-control" id="speed" name="speed" value="1" placeholder="Enter speed in milliseconds">
                    </div>
                </form>
            </div>
            <div class="col-md-6">
                <h2><i class="bi bi-lightning-charge"></i> Maze Solving</h2>
                <form id="solve-form">
                    <div class="mb-3">
                        <label for="solve-algorithm" class="form-label">Select Solving Algorithm</label>
                        <select class="form-select" id="solve-algorithm" name="solve-algorithm">
                            <option value="dfs">Depth-First Search</option>
                            <option value="bfs">Breadth-First Search</option>
                            <option value="astar">A* Search</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="solve-speed" class="form-label">Solving Speed (ms per step)</label>
                        <input type="number" class="form-control" id="solve-speed" name="solve-speed" value="1" placeholder="Enter solving speed in milliseconds">
                    </div>
                </form>
            </div>
        </div>
        <div class="text-center mt-4 d-flex justify-content-center gap-2 flex-wrap">
            <button id="generate-button" class="btn btn-primary shadow">Generate Maze</button>
            <button id="solve-button" class="btn btn-success shadow" style="display: none;">Solve Maze</button>
            <button id="stop-button" class="btn btn-danger shadow" style="display: none;">Stop</button>
            <button id="view-3d-button" class="btn btn-secondary shadow" style="display: none;">View in 3D</button>
            <button id="toggle-grid-button" class="btn btn-secondary shadow">Show Grid</button>
        </div>
        <div class="text-center mt-4">
            <canvas id="maze-canvas" width="500" height="500" style="border:1px solid #000;"></canvas>
        </div>
        <div id="maze3d-modal" style="display:none; position:fixed; top:0; left:0; width:100vw; height:100vh; background:rgba(20,20,30,0.98); z-index:9999; align-items:center; justify-content:center;">
            <button id="close-3d-btn" style="position:absolute;top:20px;right:30px;z-index:10000;font-size:2rem;background:#222;color:#fff;border:none;border-radius:8px;padding:0 16px;cursor:pointer;">&times;</button>
            <div id="maze-3d-container" style="width: 90vw; height: 90vh; margin:auto;"></div>
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.155.0/build/three.min.js"></script>
    <script src="/maze3d.js"></script>
    <script>
        let animationTimeouts = [];
        let generatedMaze = null;
        let startPoint = null;
        let endPoint = null;
        let showGrid = false;

        document.getElementById('generate-button').addEventListener('click', async (event) => {
            event.preventDefault();

            const algorithm = document.getElementById('algorithm').value;
            const size = document.getElementById('size').value;
            const speed = document.getElementById('speed').value;

            // Always clear the canvas before generating a new maze
            const canvas = document.getElementById('maze-canvas');
            const ctx = canvas.getContext('2d');
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // Reset grid toggle state and button
            showGrid = false;
            const gridBtn = document.getElementById('toggle-grid-button');
            if (gridBtn) gridBtn.textContent = 'Show Grid';

            // Clear any previous animations
            stopAnimation();

            try {
                const response = await fetch('/generate-maze', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ algorithm, size })
                });

                if (!response.ok) {
                    throw new Error('Failed to generate maze');
                }

                const data = await response.json();
                const { maze, steps, start, end } = data;

                // Store the generated maze, start, and end points
                generatedMaze = maze;
                startPoint = start;
                endPoint = end;

                animateMaze(maze, steps, size, speed, start, end);

                // Show the solve button after generation
                document.getElementById('solve-button').style.display = 'block';
                // Show the 3D button after generation
                document.getElementById('view-3d-button').style.display = 'block';
            } catch (error) {
                alert(error.message);
            }
        });

        document.getElementById('stop-button').addEventListener('click', stopAnimation);

        document.getElementById('solve-button').addEventListener('click', async () => {
            if (!generatedMaze || !startPoint || !endPoint) {
                alert('Maze not generated yet!');
                return;
            }

            const solveAlgorithm = document.getElementById('solve-algorithm').value;
            const solveSpeed = document.getElementById('solve-speed').value; // Retrieve solving speed from input field

            try {
                const response = await fetch('/solve-maze', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ maze: generatedMaze, start: startPoint, end: endPoint, algorithm: solveAlgorithm })
                });

                if (!response.ok) {
                    throw new Error('Failed to solve maze');
                }

                const data = await response.json();
                const { solutionSteps, optimalPath } = data;
                const solveSpeed = document.getElementById('solve-speed').value;
                animateSolution(solutionSteps, solveSpeed);
            } catch (error) {
                alert(error.message);
            }
        });

        document.getElementById('view-3d-button').addEventListener('click', () => {
            if (!generatedMaze) {
                alert('Maze not generated yet!');
                return;
            }
            // Show modal overlay and render 3D maze
            const modal = document.getElementById('maze3d-modal');
            modal.style.display = 'flex';
            document.body.style.overflow = 'hidden';
            renderMaze3D(generatedMaze, startPoint, endPoint);
        });
        document.getElementById('close-3d-btn').addEventListener('click', close3DModal);
        document.addEventListener('keydown', function(e) {
            if (document.getElementById('maze3d-modal').style.display === 'flex' && e.key === 'Escape') {
                close3DModal();
            }
        });
        function close3DModal() {
            const modal = document.getElementById('maze3d-modal');
            modal.style.display = 'none';
            document.body.style.overflow = '';
            // Clean up 3D renderer and listeners
            if (window.disposeMaze3D) window.disposeMaze3D();
            document.getElementById('maze-3d-container').innerHTML = '';
        }

        document.getElementById('toggle-grid-button').addEventListener('click', function() {
            showGrid = !showGrid;
            this.textContent = showGrid ? 'Hide Grid' : 'Show Grid';
            redrawMazeWithGrid();
        });

        function redrawMazeWithGrid() {
            if (!generatedMaze) return;
            // Redraw the maze and grid
            const canvas = document.getElementById('maze-canvas');
            const ctx = canvas.getContext('2d');
            const size = generatedMaze.length;
            const cellSize = Math.floor(Math.min(canvas.width / size, canvas.height / size));
            const offsetX = Math.floor((canvas.width - cellSize * size) / 2);
            const offsetY = Math.floor((canvas.height - cellSize * size) / 2);
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.fillStyle = 'black';
            ctx.fillRect(offsetX, offsetY, cellSize * size, cellSize * size);
            ctx.fillStyle = 'white';
            for (let x = 0; x < size; x++) {
                for (let y = 0; y < size; y++) {
                    if (generatedMaze[x][y] === 0) {
                        ctx.fillRect(offsetX + y * cellSize, offsetY + x * cellSize, cellSize, cellSize);
                    }
                }
            }
            ctx.fillStyle = 'green';
            ctx.fillRect(offsetX + startPoint[1] * cellSize, offsetY + startPoint[0] * cellSize, cellSize, cellSize);
            ctx.fillStyle = 'red';
            ctx.fillRect(offsetX + endPoint[1] * cellSize, offsetY + endPoint[0] * cellSize, cellSize, cellSize);
            if (showGrid) {
                drawGridOverlay(size, cellSize, offsetX, offsetY);
            }
        }

        function drawGridOverlay(size, cellSize, offsetX, offsetY) {
            const canvas = document.getElementById('maze-canvas');
            const ctx = canvas.getContext('2d');
            ctx.save();
            ctx.strokeStyle = '#d3d3d3';
            ctx.lineWidth = 1;
            for (let i = 0; i <= size; i++) {
                // Vertical lines
                ctx.beginPath();
                ctx.moveTo(offsetX + i * cellSize, offsetY);
                ctx.lineTo(offsetX + i * cellSize, offsetY + size * cellSize);
                ctx.stroke();
                // Horizontal lines
                ctx.beginPath();
                ctx.moveTo(offsetX, offsetY + i * cellSize);
                ctx.lineTo(offsetX + size * cellSize, offsetY + i * cellSize);
                ctx.stroke();
            }
            ctx.restore();
        }

        function animateMaze(maze, steps, size, speed, start, end) {
            const canvas = document.getElementById('maze-canvas');
            const ctx = canvas.getContext('2d');
            // Use Math.floor for cellSize, but ensure the maze fills the canvas exactly
            const cellSize = Math.floor(Math.min(canvas.width / size, canvas.height / size));
            // Adjust offsets so the maze is always flush to the left/top
            const offsetX = Math.floor((canvas.width - cellSize * size) / 2);
            const offsetY = Math.floor((canvas.height - cellSize * size) / 2);

            // Clear the canvas
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            // Fill only the maze area with black background
            ctx.fillStyle = 'black';
            ctx.fillRect(offsetX, offsetY, cellSize * size, cellSize * size);

            // Animate the maze generation
            ctx.fillStyle = 'white';
            steps.forEach(([x, y], index) => {
                if (speed === '0') {
                    ctx.fillRect(offsetX + y * cellSize, offsetY + x * cellSize, cellSize, cellSize);
                } else {
                    const timeout = setTimeout(() => {
                        ctx.fillRect(offsetX + y * cellSize, offsetY + x * cellSize, cellSize, cellSize);
                        if (index === steps.length - 1) {
                            ctx.fillStyle = 'green';
                            ctx.fillRect(offsetX + start[1] * cellSize, offsetY + start[0] * cellSize, cellSize, cellSize);
                            ctx.fillStyle = 'red';
                            ctx.fillRect(offsetX + end[1] * cellSize, offsetY + end[0] * cellSize, cellSize, cellSize);
                            document.getElementById('stop-button').style.display = 'none';
                        }
                    }, index * speed);
                    animationTimeouts.push(timeout);
                }
            });
            // Draw start and end points immediately for instant mode
            if (speed === '0') {
                ctx.fillStyle = 'green';
                ctx.fillRect(offsetX + start[1] * cellSize, offsetY + start[0] * cellSize, cellSize, cellSize);
                ctx.fillStyle = 'red';
                ctx.fillRect(offsetX + end[1] * cellSize, offsetY + end[0] * cellSize, cellSize, cellSize);
                document.getElementById('stop-button').style.display = 'none';
            }
            // After animation, if grid is enabled, draw it
            if (showGrid) {
                drawGridOverlay(size, cellSize, offsetX, offsetY);
            }
        }

        function animateSolution(solutionSteps, solveSpeed) {
            const canvas = document.getElementById('maze-canvas');
            const ctx = canvas.getContext('2d');
            const size = generatedMaze[0].length;
            const cellSize = Math.floor(Math.min(canvas.width / size, canvas.height / size));
            const offsetX = Math.floor((canvas.width - cellSize * size) / 2);
            const offsetY = Math.floor((canvas.height - cellSize * size) / 2);

            ctx.fillStyle = 'blue';
            solutionSteps.forEach(([x, y], index) => {
                setTimeout(() => {
                    ctx.fillRect(offsetX + y * cellSize, offsetY + x * cellSize, cellSize, cellSize);
                }, index * solveSpeed);
            });
            // After animation, if grid is enabled, draw it
            if (showGrid) {
                drawGridOverlay(size, cellSize, offsetX, offsetY);
            }
        }

        function stopAnimation() {
            // Clear all timeouts
            animationTimeouts.forEach(timeout => clearTimeout(timeout));
            animationTimeouts = [];

            // Instantly draw the rest of the maze
            if (generatedMaze) {
                const canvas = document.getElementById('maze-canvas');
                const ctx = canvas.getContext('2d');
                const size = generatedMaze.length;
                const cellSize = Math.floor(Math.min(canvas.width / size, canvas.height / size));
                const offsetX = Math.floor((canvas.width - cellSize * size) / 2);
                const offsetY = Math.floor((canvas.height - cellSize * size) / 2);
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                ctx.fillStyle = 'black';
                ctx.fillRect(offsetX, offsetY, cellSize * size, cellSize * size);
                ctx.fillStyle = 'white';
                for (let x = 0; x < size; x++) {
                    for (let y = 0; y < size; y++) {
                        if (generatedMaze[x][y] === 0) {
                            ctx.fillRect(offsetX + y * cellSize, offsetY + x * cellSize, cellSize, cellSize);
                        }
                    }
                }
                ctx.fillStyle = 'green';
                ctx.fillRect(offsetX + startPoint[1] * cellSize, offsetY + startPoint[0] * cellSize, cellSize, cellSize);
                ctx.fillStyle = 'red';
                ctx.fillRect(offsetX + endPoint[1] * cellSize, offsetY + endPoint[0] * cellSize, cellSize, cellSize);
            }
            // After drawing, if grid is enabled, draw it
            if (showGrid) {
                drawGridOverlay(size, cellSize, offsetX, offsetY);
            }
            document.getElementById('stop-button').style.display = 'none';
        }
    </script>
</body>
</html>
